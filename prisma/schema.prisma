// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserType {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  userTypeId String    @db.Uuid
  name       String
  lastName   String
  fullName   String
  email      String    @unique
  password   String
  cpf        String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userType   UserType  @relation(fields: [userTypeId], references: [id])
  vehicle    Vehicle[]
}

model ModalCateogry {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modal     Modal[]
}

model Modal {
  id              String        @id @default(uuid()) @db.Uuid
  modalCategoryId String        @db.Uuid
  transitBoard    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  modalCategory   ModalCateogry @relation(fields: [modalCategoryId], references: [id])
  order           Order[]
}

model Vehicle {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  transitBoard String
  height       Float
  width        Float
  weight       Float
  isAxle       Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  order        Order[]
}

model OrderStatus {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
}

model Problem {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
}

model TypeLoad {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
}

model Order {
  id                 String      @id @default(uuid()) @db.Uuid
  modalId            String      @db.Uuid
  vehicleId          String      @db.Uuid
  orderStatusId      String      @db.Uuid
  location           String
  problemDescription String?
  loadWeight         Float?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  modal              Modal       @relation(fields: [modalId], references: [id])
  vehicle            Vehicle     @relation(fields: [vehicleId], references: [id])
  orderStatus        OrderStatus @relation(fields: [orderStatusId], references: [id])
  problem            Problem[]
  typeLoad           TypeLoad[]
}
