generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model UserType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User[]
}

model User {
  id         Int       @id @default(autoincrement())
  userTypeId Int
  name       String
  lastName   String
  fullName   String
  email      String    @unique
  password   String
  cpf        String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  userType   UserType  @relation(fields: [userTypeId], references: [id])
  vehicle    Vehicle[]

  @@index([userTypeId])
}

model ModalCateogry {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  modal     Modal[]
}

model Modal {
  id              Int           @id @default(autoincrement())
  modalCategoryId Int
  transitBoard    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  modalCategory   ModalCateogry @relation(fields: [modalCategoryId], references: [id])
  order           Order[]

  @@index([modalCategoryId])
}

model Vehicle {
  id           Int      @id @default(autoincrement())
  userId       Int
  transitBoard String
  height       Float
  width        Float
  weight       Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  brand        String
  model        String
  year         Int
  user         User     @relation(fields: [userId], references: [id])
  order        Order[]

  @@index([userId])
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order[]
}

model Problem {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order[]
}

model TypeLoad {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order[]
}

model Order {
  id                 Int         @id @default(autoincrement())
  modalId            Int
  vehicleId          Int
  orderStatusId      Int
  location           String
  problemDescription String?
  loadWeight         Float?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now()) @updatedAt
  modal              Modal       @relation(fields: [modalId], references: [id])
  vehicle            Vehicle     @relation(fields: [vehicleId], references: [id])
  orderStatus        OrderStatus @relation(fields: [orderStatusId], references: [id])
  problem            Problem[]
  typeLoad           TypeLoad[]

  @@index([modalId, vehicleId, orderStatusId])
}

model OrderToProblem {
  A Int
  B Int

  @@unique([A, B], map: "_OrderToProblem_AB_unique")
  @@index([B], map: "_OrderToProblem_B_index")
  @@map("_OrderToProblem")
}

model OrderToTypeLoad {
  A Int
  B Int

  @@unique([A, B], map: "_OrderToTypeLoad_AB_unique")
  @@index([B], map: "_OrderToTypeLoad_B_index")
  @@map("_OrderToTypeLoad")
}
